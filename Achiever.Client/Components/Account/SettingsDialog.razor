@using Achiever.Client.Services.Goals
@using static Microsoft.FluentUI.AspNetCore.Components.Color
@implements IDialogContentComponent<string>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.EditSettings())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
    <FluentIcon Value="new Icons.Regular.Size24.PaintBucket()" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Custom" @bind-CustomColor="@_previewColor" />
    <FluentTextField Label="Change Base Color"  @bind-Value="@Content" @onchange="ChangeColor" data-coloris> </FluentTextField>
    </FluentStack>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

<script>
    Coloris({
        defaultColor: @Content,
</script>

@code {
    [Parameter]
    public string? Content { get; set; }

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    private bool _livePreview = true;

    private string _previewColor = "";

    protected override void OnInitialized()
    {
        _previewColor = Content;

        base.OnInitialized();
    }

    protected void ChangeColor(ChangeEventArgs e)
    {
        Content = e.Value.ToString();
        _previewColor = Content;
    }

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

}