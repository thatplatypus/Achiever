@using Achiever.Client.Components.Account
@using Color = Microsoft.FluentUI.AspNetCore.Components.Color
@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div style="background-color: var(--neutral-layer-card-container);min-height:100dvh;overflow-x:hidden;">
<FluentMainLayout>
    <Header>
            <h3>Achiever</h3>
            <FluentSpacer />
            <AuthorizeView>
                <Authorized>
                    <FluentStack Orientation="Orientation.Horizontal">
                    <FluentSpacer />
                    @if(_darkMode)
                    {
                        <div id="dark-mode-icon" @onclick="ToggleTheme" class="user-menu-icon">
                                <FluentIcon Style="margin-top:0.25em;" Value="@(new Icons.Filled.Size24.WeatherMoon())" Color="Color.Fill" />
                        </div>
                        <FluentTooltip Delay="1" Anchor="dark-mode-icon">
                            Toggle Theme
                        </FluentTooltip>
                    }
                    else
                    {
                        <div id="light-mode-icon" @onclick="ToggleTheme" class="user-menu-icon">
                                <FluentIcon Style="margin-top:0.25em;" Value="@(new Icons.Filled.Size24.WeatherSunny())" Color="Color.Fill" />
                        </div>
                        <FluentTooltip Delay="1" Anchor="light-mode-icon">
                                Toggle Theme
                            </FluentTooltip>
                    }
                    <div @onclick="ToggleMenu" id="account-icon" class="user-menu-icon">
                            <FluentIcon Style="margin-top:0.25em;" Value="@(new Icons.Filled.Size24.Person())" Color="Color.Fill" />
                    </div>
                    <FluentTooltip Delay="1" Anchor="account-icon">
                        Account
                    </FluentTooltip>
                    <FluentMenu Anchor="account-icon" @bind-Open="@_open" Anchored="true" >
                        <FluentTextField Label="User" Value="@(context?.User?.Identity?.Name)" ReadOnly="true" />
                        <FluentDivider />
                        <FluentMenuItem  Label="Logout" OnClick="@(() => NavigationManager.NavigateTo("/logout"))"><FluentIcon Value="@(new Icons.Regular.Size20.ArrowExit())" /></FluentMenuItem>
                    </FluentMenu>
                    <div id="settings-icon" @onclick="OpenSettings" class="user-menu-icon">
                            <FluentIcon Style="margin-top:0.25em;" Value="@(new Icons.Filled.Size24.Settings())" Color="Color.Fill" />
                    </div>
                    <FluentTooltip Delay="1" Anchor="settings-icon">
                        Settings
                    </FluentTooltip>
                    </FluentStack>
                </Authorized>
                <NotAuthorized>
                <FluentNavLink Class="header-link" IconColor="Color.Fill" Icon="@(new Icons.Regular.Size32.Person())" Href="login" Tooltip="Login">Login</FluentNavLink>
                <FluentNavLink Class="header-link" IconColor="Color.Fill" Icon="@(new Icons.Regular.Size32.Signature())" Href="register" Tooltip="Register">Register</FluentNavLink>
            </NotAuthorized>
            </AuthorizeView>
    </Header>
    
    <Body>
        <article class="content px-4 overflow-hidden" style="padding-top:5px;min-height:90dvh;">
            @Body
        </article>
        <FluentToastProvider />
        <FluentDialogProvider />
        <FluentTooltipProvider />
        <FluentMessageBarProvider />
    </Body>
</FluentMainLayout>
<FluentDesignTheme @ref="_theme" @bind-Mode="_themeMode" @bind-CustomColor="_color" />
</div>

@code {
    private bool _open = false;

    private bool _darkMode = true;

    private DesignThemeModes _themeMode = DesignThemeModes.Dark;

    private FluentDesignTheme _theme = default!;

    private string _color = "#0078d4";
    private string __color = "";

    private void ToggleMenu()
    {
        _open = !_open;
        Console.WriteLine(_open);
        StateHasChanged();
    }

    private void ToggleTheme()
    {
        _darkMode = !_darkMode;
        if(_darkMode)
        {
            _themeMode = DesignThemeModes.Dark;
        }
        else
        {
            _themeMode = DesignThemeModes.Light;
        }
        StateHasChanged();
    }

    private async Task OpenSettings()
    {
        var color = _color + "";
        __color = _color + "";
        await DialogService.ShowDialogAsync<SettingsDialog>(color, new DialogParameters()
            {
                Title = $"Settings",
                OnDialogResult = DialogService.CreateDialogCallback(this, HandleSettingsDialog),
                PrimaryAction = "Save",
                PrimaryActionEnabled = true,
                SecondaryAction = "Cancel",
                Width = "500px",
                Modal = true,
            });
    }

    private async Task HandleSettingsDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            _color = __color;

            StateHasChanged();

            return;
        }

        if (!string.IsNullOrWhiteSpace(result.Data as string))
        {
            _color = result.Data as string;

            StateHasChanged();

            return;
        }
    }
}        