@using Achiever.Client.Services.Snapshot
@inject IDialogService DialogService
@inject ISnapshotService SnapshotService

<FluentDropZone TItem="string" Id="@DropZoneId" Draggable="false" Droppable="true">
    @if (SubTasks != null)
    {
        <FluentCard Style="@($"min-height:35rem;border-left-color:{Color};border-left-style:solid;border-left-width:0.5rem;")" Width="20rem;">
            <h4>@Title</h4>
            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical">
            @foreach (var subtask in SubTasks?.Where(st => st.Status.Equals(Status, StringComparison.OrdinalIgnoreCase)))
            {
                <DraggableSubTask OnClick="OpenSubTaskDetails" Subtask="@subtask" />
            }
            </FluentStack>
        </FluentCard>
    }
</FluentDropZone>

@code {
    [Parameter]
    public string DropZoneId { get; set; } = default!;

    [Parameter]
    public string Status { get; set; } = "";

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string Color { get; set; } = "var(--accent-fill-rest)";

    [Parameter]
    public List<SubTask> SubTasks { get; set; } = default!;

    [Parameter]
    public EventCallback<SubTask> OnSubTaskUpdated { get; set; } = default!;

    protected override Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(DropZoneId))
        {
            throw new ArgumentNullException(nameof(DropZoneId));
        };

        if (string.IsNullOrWhiteSpace(Status))
        {
            Status = DropZoneId;
        };

        if (string.IsNullOrWhiteSpace(Title))
        {
            Title = DropZoneId;
        }

        return base.OnParametersSetAsync();
    }

    protected async Task OpenSubTaskDetails(SubTask subTask)
    {
        SnapshotService.Snapshot(SubTasks.Select(x => x.Clone()).ToList());

        await DialogService.ShowDialogAsync<SubTaskDetailsDialog>(subTask, new DialogParameters()
            {
                Title = $"Edit Task",
                OnDialogResult = DialogService.CreateDialogCallback(this, HandleSubTaskDialog),
                PrimaryAction = "Save",
                PrimaryActionEnabled = true ,
                SecondaryAction = "Cancel",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
            });
    }

    private async Task HandleSubTaskDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            SubTasks = SnapshotService.GetLatest<List<SubTask>>();
            return;
        }

        if (result.Data is not null)
        {
            SubTask? subTask = result.Data as SubTask;
            
            if(OnSubTaskUpdated.HasDelegate)
            {
                await OnSubTaskUpdated.InvokeAsync(subTask);
            }
            
            return;
        }
    }
}
