@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation;
@using Color = Microsoft.FluentUI.AspNetCore.Components.Color;
@inject NavigationManager NavigationManager

<FluentCard Width="26rem" Height="20rem">
    <FluentStack Orientation="Orientation.Vertical">
        <div style="display:flex;width:100%;">
            <h3>@Goal.Title</h3>
            <FluentSpacer />
            <div>
                <div class="text-muted">Target Date</div>
                <div style="@GetTargetDateStyle(Goal?.EndDate, Goal?.TargetEndDate)">@(Goal?.TargetEndDate.HasValue ?? false ? Goal?.TargetEndDate.Value.ToString("MMMM dd, yyyy") : "--")</div>
            </div>
        </div>

        <FluentDivider Class="w-100" Role="DividerRole.Separator" Orientation="Orientation.Horizontal" />

        <FluentStack Style="height:11rem;" Orientation="Orientation.Horizontal">
        <FluentStack Orientation="Orientation.Vertical">
            @if(Goal.SubTasks != null && Goal.SubTasks.Count() > 0){
            <h4>@Goal.SubTasks.Where(x => x.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase)).Count() / @Goal.SubTasks.Count() Complete</h4>
            @foreach(var task in Goal.SubTasks.Take(5))
                    {
                        var backgroundColor = task.Status switch
                        {
                            "Completed" => "Green",
                            "InProgress" => "DarkCyan",
                            "Not Started" => "var(--fill-color)",
                            _ => "var(--fill-color)",
                        };
                        <FluentBadge title="@task.Status" Fill="@backgroundColor" BackgroundColor="@backgroundColor" Color="white">
                            @task.Title
                        </FluentBadge>
                    }
                }
            else {
             <h4>No Tasks</h4>
            }
        </FluentStack>
        <FluentDivider Style="height:80%;margin-top:auto;margin-bottom:auto;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <div style="width:18rem;">
            @if(_chartLoaded)
            {
                <ApexGauge 
                    Options="_options" 
                    Percentage="@(Goal?.SubTasks?.Count() > 0 ? Math.Round((decimal)(Goal.SubTasks.Where(x => x.Status.Equals("Completed", StringComparison.OrdinalIgnoreCase)).Count() / (decimal)Goal.SubTasks.Count()) * 100, 2) : 100)" 
                    Label="Progress"/>
            }
            else
            {
                <FluentSkeleton Height="200px" Width="200px" Shape="SkeletonShape.Circle"></FluentSkeleton>
            }
        </div>
        </FluentStack>

        <FluentDivider Class="w-100" Role="DividerRole.Separator" Orientation="Orientation.Horizontal" />

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End">
            <FluentDivider />
            <FluentButton Appearance="Appearance.Lightweight" OnClick="EditGoal" IconStart="@(new Icons.Regular.Size32.Edit())">Edit</FluentButton>
            <FluentButton Appearance="Appearance.Lightweight" OnClick="DeleteGoal" IconStart="@(new Icons.Regular.Size32.Delete())">Delete</FluentButton>
        </FluentStack>
    </FluentStack>

</FluentCard>

@code {
    [Parameter]
    public Goal Goal { get; set; } = default!;

    [Parameter]
    public EventCallback<Goal> OnGoalEdit { get; set; } = default!;

    [Parameter]
    public EventCallback<Goal> OnGoalDelete { get; set; } = default!;

    //Figure out how to introduce a better loading state later
    private bool _chartLoaded = true;

    private ApexChartOptions<GaugeValue> _options = new()
        {
            Chart = new()
            {
                Height = 200,
                Type = ChartType.RadialBar,
            },
            PlotOptions = new()
            {
                RadialBar = new()
                {
                    Hollow = new()
                    {
                        Size = "70%",
                    },
                    DataLabels = new()
                    {
                        Name = new()
                        {
                            Color = "#888",
                        },
                        Value = new()
                        {
                            Color = "#888",
                        },
                    },
                },
            },
            Stroke = new()
            {
                LineCap = LineCap.Round,
            },
        };

    protected async Task EditGoal()
    {
        if(OnGoalEdit.HasDelegate)
        {
            await OnGoalEdit.InvokeAsync(Goal);
        };
    }

    protected async Task DeleteGoal()
    {
        if(OnGoalDelete.HasDelegate)
        {
            await OnGoalDelete.InvokeAsync(Goal);
        };
    }

    protected string GetTargetDateStyle(DateTimeOffset? completedDate, DateTimeOffset? targetDate)
    {
        if(completedDate.HasValue)
        {
                return "color:var(--bs-success);";
        };

        if (targetDate.HasValue)
        {
            if (targetDate.Value.Date < DateTime.Now.Date)
            {
                return "color:var(--bs-danger);";
            }
            else if (targetDate.Value.Date < DateTime.Now.Date.AddDays(7))
            {
                return "color:var(--bs-warning);";
            }
        }

        return string.Empty;
    }
}