@using Achiever.Client.Services.Goals
@implements IDialogContentComponent<SubTask>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.Edit())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
        <FluentSpacer />
        <FluentButton OnClick="DeleteAsync" Appearance="Appearance.Stealth">
            <FluentIcon Value="new Icons.Regular.Size20.Delete()" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Error" />
            Delete
        </FluentButton>
        <FluentDivider Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" />
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
        <FluentTextField @bind-Value="@Content.Title">Title</FluentTextField>
        <div style="margin-top:-0.15em;">
        <FluentSelect TOption="KeyValuePair<string, string>"
                      Label="Status"
                      Items="@SubTaskDisplay.Statuses.ToArray()"
                      OptionValue="@(x => x.Key)"
                      OptionText="@(x => x.Value)"
                      @bind-Value="@Content.Status" />
        </div>
    </FluentStack>
    <FluentSpacer />
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
        <FluentNumberField @bind-Value="@Content.EstimatedHours">Estimated Hours</FluentNumberField>
    </FluentStack>
    <FluentSpacer />
    <FluentTextArea @bind-Value="@Content.Note" Class="w-100">Notes</FluentTextArea>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public SubTask Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }

    private async Task DeleteAsync()
    {
        Content.UserDeleted = true;
        await Dialog.CloseAsync(Content);
    }
}