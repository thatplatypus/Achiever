@page "/goals"
@using Achiever.Client.Services.Goals
@using Achiever.Client.Services.Snapshot
@inject GoalClient GoalClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IToastService ToastService
@inject ISnapshotService SnapshotService

<PageTitle>Goals</PageTitle>

<FluentToolbar Class="p-2" Style="margin-bottom:1rem;border-radius:0.25rem;width:-webkit-fill-available;" id="toolbar-fluent-components">
    <h1>Goals</h1>
    <FluentSpacer />
    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Trophy())" OnClick="CreateGoal">Create Goal</FluentButton>
</FluentToolbar>

@if (_goals == null)
{
    <p><em>Loading...</em></p>
}
else
{
       <FluentGrid Spacing="10">
        @foreach (var goal in _goals)
        {
            <FluentGridItem>
                <GoalCard Goal="@goal" OnGoalDelete="OnDeleteGoal" OnGoalEdit="OnEditGoal" OnGoalUpdated="OnGoalUpdated" OnSubTaskUpdated="OnSubTaskUpdated" />
            </FluentGridItem>
        }

    </FluentGrid>
}

@code {
    private List<Goal>? _goals;

    protected override async Task OnInitializedAsync()
    {
        var result = await GoalClient.GetGoalsAsync();

        if(result.IsSuccess)
        {
            _goals = result.Value;
        }
        else
        {
            ToastService.ShowError($"Error retrieving goals: {result?.Message ?? "Unknown Error"}");
            _goals = new List<Goal>();
        }
    }

    protected async Task CreateGoal()
    {
        var goal = new Goal {
            Title = "New Goal" 
        };
        var result = await GoalClient.CreateGoalAsync(goal);
        if(result.IsSuccess)
        {
            goal.Id = result.Value;
            _goals.Add(goal);
            ToastService.ShowSuccess($"Successfully created goal");
        }
        else
        {
            ToastService.ShowError($"Error creating goal: {result?.Message ?? "Unknown Error"}");
        }
        StateHasChanged();
    }

    protected void OnEditGoal(Goal goal)
    {
        NavigationManager.NavigateTo($"goals/{goal.Id}");
    }

    protected async Task OnDeleteGoal(Goal goal)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Do you really want to delete this goal?", "Delete", "Cancel", goal.Title);
        var dialogResult = await dialog.Result;

        if (dialogResult.Cancelled)
        {
            await Task.CompletedTask;
            return;
        }

        var result = await GoalClient.DeleteGoalAsync(goal.Id.Value);

        if(!result.IsSuccess || !(result.Value ?? true))
        {
            ToastService.ShowError($"Error deleting goal: {goal.Title}");
        }
        else
        {
            ToastService.ShowSuccess($"Successfully deleted goal: {goal.Title}");
            _goals?.Remove(goal);
        }

        StateHasChanged();
    }

    protected async Task OnSubTaskUpdated((SubTask subTask, Goal snapshot) x)
    {
        var goal = _goals?.FirstOrDefault(g => g.SubTasks.Any(st => st.Id == x.subTask.Id));

        if(x.subTask.UserDeleted ?? false)
        {
            goal?.SubTasks.Remove(x.subTask);
            var deleteResult = await GoalClient.DeleteSubTaskAsync(x.subTask.Id);
            if(deleteResult.IsSuccess)
            {
                ToastService.ShowSuccess($"Successfully deleted subtask: {x.subTask.Title}");
            }
            else
            {
                var title = x.subTask.Title;
                ToastService.ShowError($"Error deleting subtask: {title}\n\n{deleteResult.Message}");
                goal = x.snapshot;
            };
            return;
        }

        var result = await GoalClient.UpdateGoalAsync(goal!);

        if(result.IsSuccess)
        {
            ToastService.ShowSuccess($"Successfully updated subtask: {x.subTask.Title}");
        }
        else
        {
            var index = _goals?.FindIndex(g => g.Id == goal?.Id);

            if(index != null && index >= 0)
            {
                _goals![(int)index] = x.snapshot;
            }

            var title = x.snapshot.SubTasks.FirstOrDefault(st => st.Id == x.subTask.Id)?.Title ?? "Unknown Subtask";

            ToastService.ShowError($"Error updating subtask: {title}\n\n{result.Message}");

            StateHasChanged();
        }
    }

    protected async Task OnGoalUpdated(Goal goal)
    {
        var result = await GoalClient.UpdateGoalAsync(goal!);

        if (result.IsSuccess)
        {
            ToastService.ShowSuccess($"Successfully updated goal: {goal.Title}");
        }
        else
        {
            var oldGoal = SnapshotService.GetLatest<Goal>();

            var title = oldGoal.Title;

            ToastService.ShowError($"Error updating goal: {title}\n\n{result.Message}");

            var index = _goals.IndexOf(goal);
            _goals[index] = oldGoal;

            StateHasChanged();
        }
    }
}
