@page "/goals/{Id}"
@using Achiever.Client.Services.Goals
@using Achiever.Client.Services.Snapshot
@inject GoalClient GoalClient
@inject IToastService ToastService
@inject ISnapshotService SnapshotService
@inject IDialogService DialogService

<FluentToolbar Class="p-2" Style="margin-bottom:1rem;border-radius:0.25rem;width:-webkit-fill-available;" id="toolbar-fluent-components">
    <h1>@_goal?.Title</h1>
    <FluentSpacer />
    <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size20.Add())" OnClick="AddSubTask">Add Task</FluentButton>
</FluentToolbar>

<FluentDragContainer TItem="string"
                     OnDropEnd="@(e => UpdateSubTaskStatus(e, e.Target.Id))">
    <FluentStack HorizontalAlignment="HorizontalAlignment.Center" HorizontalGap="108">
        <SubTaskDropzone OnSubTaskUpdated="SubTaskUpdated" DropZoneId="New" SubTasks="@_goal?.SubTasks" Color="var(--neutral-base-color)" />
        <SubTaskDropzone OnSubTaskUpdated="SubTaskUpdated" DropZoneId="InProgress" Title="In Progress" SubTasks="@_goal?.SubTasks" Color="DarkCyan" />
        <SubTaskDropzone OnSubTaskUpdated="SubTaskUpdated" DropZoneId="Completed" SubTasks="@_goal?.SubTasks" Color="var(--bs-success)" />
    </FluentStack>
</FluentDragContainer>

@code {
    [Parameter]
    public string Id { get; set; }

    private Goal _goal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var result = await GoalClient.GetGoalByIdAsync(Guid.Parse(Id));

        if (result.IsSuccess)
        {
            _goal = result.Value;
            SnapshotService.Snapshot(_goal);
        }
        else
        {
            ToastService.ShowError(result?.Message ?? "Unknown Error");
        }

        await base.OnInitializedAsync();
    }

    private async void UpdateSubTaskStatus(FluentDragEventArgs<string> e, string newStatus)
    {
        Console.WriteLine(e.Source.Id);
        var subtask = _goal.SubTasks.FirstOrDefault(st => st.Id.ToString() == e.Source.Id);
        if (subtask != null)
        {
            if (subtask.Status.Equals(newStatus, StringComparison.OrdinalIgnoreCase))
            {
                await OpenSubTaskDetails(subtask);
            }
            else
            {
                subtask.Status = newStatus;
                await UpdateGoalAsync(_goal);
            }
        }
    }

    private async Task SubTaskUpdated(SubTask subTask)
    {
        var index = _goal.SubTasks.FindIndex(st => st.Id == subTask.Id);
        if(index >= 0)
        {
            if(subTask.UserDeleted ?? false)
            {
                _goal.SubTasks.RemoveAt(index);
                await DeleteSubTaskAsync(subTask);
            }
            else
            {
                _goal.SubTasks[index] = subTask;
                await UpdateGoalAsync(_goal, SnapshotService.GetLatest<Goal>());
            }
        }
        else
        {
            ToastService.ShowError($"Subtask not found: {subTask.Title}");
        }
    }

    protected async Task AddSubTask()
    {
        var id = SnapshotService.Snapshot(_goal);

        var subTask = new SubTask
        {
            Title = "New Subtask",
            Status = "New",
            Id = Guid.Empty,
        };

        var result = await GoalClient.CreateSubtaskAsync(_goal.Id!.Value, subTask);

        if (result.IsSuccess)
        {
            subTask.Id = result.Value;
            _goal.SubTasks ??= new List<SubTask>();
            _goal.SubTasks.Add(subTask);
            ToastService.ShowSuccess($"Subtask created successfully");
        }
        else
        {
            ToastService.ShowError($"Error adding subtask");
        }
    }

    private async Task UpdateGoalAsync(Goal goal, Goal snapshot = default!)
    {
        var result = await GoalClient.UpdateGoalAsync(goal);

        if (result.IsSuccess)
        {
            ToastService.ShowSuccess($"{goal.Title} updated successfully");
        }
        else
        {
            ToastService.ShowError(result?.Message ?? "Unknown Error");
            var goalSnapshot = SnapshotService.GetLatest<Goal>();
            _goal = goalSnapshot ?? snapshot ?? _goal;
        }

        StateHasChanged();
    }

    private async Task DeleteSubTaskAsync(SubTask subTask)
    {
        var result = await GoalClient.DeleteSubTaskAsync(subTask.Id);

        if (result.IsSuccess)
        {
            ToastService.ShowSuccess($"{subTask.Title} deleted successfully");
        }
        else
        {
            ToastService.ShowError(result?.Message ?? "Unknown Error");
            var goalSnapshot = SnapshotService.GetLatest<Goal>();
            _goal = goalSnapshot ?? _goal;
        }

        StateHasChanged();
    }

    protected async Task OpenSubTaskDetails(SubTask subTask)
    {
        SnapshotService.Snapshot(_goal.SubTasks.Select(x => x.Clone()).ToList());

        await DialogService.ShowDialogAsync<SubTaskDetailsDialog>(subTask, new DialogParameters()
            {
                Title = $"Edit Task",
                OnDialogResult = DialogService.CreateDialogCallback(this, HandleSubTaskDialog),
                PrimaryAction = "Save",
                PrimaryActionEnabled = true,
                SecondaryAction = "Cancel",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
            });
    }

    private async Task HandleSubTaskDialog(DialogResult result)
    {
        if (result.Cancelled)
        {
            _goal.SubTasks = SnapshotService.GetLatest<List<SubTask>>();
            return;
        }

        if (result.Data is not null)
        {
            SubTask? subTask = result.Data as SubTask;

            await SubTaskUpdated(subTask);
        }
    }
}