@page "/goals/{Id}"
@using Achiever.Client.Services.Goals
@inject GoalClient GoalClient
@inject IToastService ToastService

@if(_goal != null)
{
    <h3>@_goal.Title</h3>
}

<FluentDragContainer TItem="string"
                     OnDropEnd="@(e => UpdateSubTaskStatus(e, e.Target.Id))">
    <FluentStack HorizontalAlignment="HorizontalAlignment.Center" HorizontalGap="108">
        <SubTaskDropzone DropZoneId="New" SubTasks="@_goal?.SubTasks" Color="var(--neutral-base-color)" />
        <SubTaskDropzone DropZoneId="InProgress" Title="In Progress" SubTasks="@_goal?.SubTasks" Color="DarkCyan" />
        <SubTaskDropzone DropZoneId="Completed" SubTasks="@_goal?.SubTasks" Color="var(--bs-success)" />
    </FluentStack>
</FluentDragContainer>

@code {
    [Parameter]
    public string Id { get; set; }

    private Goal _goal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var result = await GoalClient.GetGoalByIdAsync(Guid.Parse(Id));

        if (result.IsSuccess)
        {
            _goal = result.Value;
        }
        else
        {
            ToastService.ShowError(result?.Message ?? "Unknown Error");
        }

        await base.OnInitializedAsync();
    }

    private async void UpdateSubTaskStatus(FluentDragEventArgs<string> e, string newStatus)
    {
        Console.WriteLine(e.Source.Id);
        var subtask = _goal.SubTasks.FirstOrDefault(st => st.Id.ToString() == e.Source.Id);
        if (subtask != null)
        {
            subtask.Status = newStatus;
            var result =  await GoalClient.UpdateGoalAsync(_goal);

            if(result.IsSuccess)
            {
                ToastService.ShowSuccess($"{_goal.Title} updated successfully");
            }
            else
            {
                ToastService.ShowError(result?.Message ?? "Unknown Error");
            }

            StateHasChanged();
        }
    }
}